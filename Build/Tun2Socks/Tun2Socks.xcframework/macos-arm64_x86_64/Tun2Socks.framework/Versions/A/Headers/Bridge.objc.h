// Objective-C API for talking to github.com/xjasonlyu/tun2socks/v2/bridge Go package.
//   gobind -lang=objc github.com/xjasonlyu/tun2socks/v2/bridge
//
// File is generated by gobind. Do not edit.

#ifndef __Bridge_H__
#define __Bridge_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class BridgeConfig;
@class BridgeEngine;
@protocol BridgeNetwork;
@class BridgeNetwork;
@protocol BridgePacketEmitter;
@class BridgePacketEmitter;

@protocol BridgeNetwork <NSObject>
/**
 * TCPClose tears down the connection identified by handle.
 */
- (BOOL)tcpClose:(int64_t)handle error:(NSError* _Nullable* _Nullable)error;
/**
 * TCPDial establishes a TCP session to the destination host/port and
returns an opaque handle understood by the Swift layer.
 */
- (BOOL)tcpDial:(NSString* _Nullable)host port:(int32_t)port timeoutMillis:(int64_t)timeoutMillis ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * TCPWrite writes payload bytes to the connection identified by handle.
 */
- (BOOL)tcpWrite:(int64_t)handle payload:(NSData* _Nullable)payload ret0_:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPClose tears down the session identified by handle.
 */
- (BOOL)udpClose:(int64_t)handle error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPDial establishes a UDP session to the destination host/port and
returns an opaque handle understood by the Swift layer.
 */
- (BOOL)udpDial:(NSString* _Nullable)host port:(int32_t)port ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPWrite writes payload bytes to the session identified by handle.
 */
- (BOOL)udpWrite:(int64_t)handle payload:(NSData* _Nullable)payload ret0_:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

@protocol BridgePacketEmitter <NSObject>
- (BOOL)emitPacket:(NSData* _Nullable)packet protocolNumber:(int32_t)protocolNumber error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Config captures the tun2socks runtime options surfaced to the Swift side.
 */
@interface BridgeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * MTU is the maximum transmission unit applied to the virtual interface.
 */
@property (nonatomic) long mtu;
@end

/**
 * Engine wires the Go tun2socks core to the Swift-based Network Extension host.
 */
@interface BridgeEngine : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEngine constructs a new bridge instance.
 */
- (nullable instancetype)init:(BridgeConfig* _Nullable)cfg emitter:(id<BridgePacketEmitter> _Nullable)emitter network:(id<BridgeNetwork> _Nullable)network;
/**
 * HandlePacket injects an inbound packet (read from packetFlow) into the Go stack.
 */
- (BOOL)handlePacket:(NSData* _Nullable)packet protocolNumber:(int32_t)protocolNumber error:(NSError* _Nullable* _Nullable)error;
/**
 * IsRunning reports whether Start has been called successfully.
 */
- (BOOL)isRunning;
/**
 * Start boots the underlying gVisor stack and begins processing flows.
 */
- (BOOL)start:(NSError* _Nullable* _Nullable)error;
/**
 * Stop tears the bridge down and releases resources.
 */
- (void)stop;
/**
 * TCPDidClose notifies the Go side that Swift has closed a TCP connection.
 */
- (void)tcpDidClose:(int64_t)handle message:(NSString* _Nullable)message;
/**
 * TCPDidReceive delivers data produced by Swift for a given TCP handle.
 */
- (void)tcpDidReceive:(int64_t)handle payload:(NSData* _Nullable)payload;
/**
 * UDPDidClose tears down the UDP session identified by handle.
 */
- (void)udpDidClose:(int64_t)handle message:(NSString* _Nullable)message;
/**
 * UDPDidReceive delivers a UDP datagram produced by Swift.
 */
- (void)udpDidReceive:(int64_t)handle payload:(NSData* _Nullable)payload;
@end

/**
 * NewEngine constructs a new bridge instance.
 */
FOUNDATION_EXPORT BridgeEngine* _Nullable BridgeNewEngine(BridgeConfig* _Nullable cfg, id<BridgePacketEmitter> _Nullable emitter, id<BridgeNetwork> _Nullable network, NSError* _Nullable* _Nullable error);

@class BridgeNetwork;

@class BridgePacketEmitter;

/**
 * Network abstracts the Network Extension plumbing that powers TCP and UDP
sessions. Each method is bridged into Swift via gomobile.
 */
@interface BridgeNetwork : NSObject <goSeqRefInterface, BridgeNetwork> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * TCPClose tears down the connection identified by handle.
 */
- (BOOL)tcpClose:(int64_t)handle error:(NSError* _Nullable* _Nullable)error;
/**
 * TCPDial establishes a TCP session to the destination host/port and
returns an opaque handle understood by the Swift layer.
 */
- (BOOL)tcpDial:(NSString* _Nullable)host port:(int32_t)port timeoutMillis:(int64_t)timeoutMillis ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * TCPWrite writes payload bytes to the connection identified by handle.
 */
- (BOOL)tcpWrite:(int64_t)handle payload:(NSData* _Nullable)payload ret0_:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPClose tears down the session identified by handle.
 */
- (BOOL)udpClose:(int64_t)handle error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPDial establishes a UDP session to the destination host/port and
returns an opaque handle understood by the Swift layer.
 */
- (BOOL)udpDial:(NSString* _Nullable)host port:(int32_t)port ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * UDPWrite writes payload bytes to the session identified by handle.
 */
- (BOOL)udpWrite:(int64_t)handle payload:(NSData* _Nullable)payload ret0_:(int32_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PacketEmitter is satisfied by Swift code that reflects outbound packets back
into the Network Extension packetFlow.
 */
@interface BridgePacketEmitter : NSObject <goSeqRefInterface, BridgePacketEmitter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)emitPacket:(NSData* _Nullable)packet protocolNumber:(int32_t)protocolNumber error:(NSError* _Nullable* _Nullable)error;
@end

#endif
